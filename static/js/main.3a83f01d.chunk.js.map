{"version":3,"sources":["components/Balance/Balance.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Dashboard.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","serviceWorker.js","index.js","components/Controls/Controls.module.css"],"names":["module","exports","Controls","handleDeposit","handleWithdraw","className","css","controls","type","min","name","onClick","e","button","Balance","income","expense","balance","role","aria-label","TransactionLines","transactions","map","id","amount","date","key","defaultProps","TransactionHistory","history","Dashboard","state","getIncome","storedTransactions","reduce","acc","transaction","getExpense","componentDidMount","toast","configure","storedValue","localStorage","getItem","storedArr","JSON","parse","transIncome","transExpense","setState","notify","message","Number","target","parentElement","firstElementChild","value","v4","Date","toLocaleString","prevState","allTransactions","setItem","stringify","this","dashboard","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a83f01d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__3EpXv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__3qT2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__1M7Pi\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./Controls.module.css\";\n\nconst Controls = ({ handleDeposit, handleWithdraw }) => (\n  <section className={css.controls}>\n    <input type=\"number\" min=\"0\" name=\"amount\" />\n    <button\n      onClick={e => handleDeposit(e)}\n      type=\"button\"\n      className={css.button}\n    >\n      Deposit\n    </button>\n    <button\n      onClick={e => handleWithdraw(e)}\n      type=\"button\"\n      className={css.button}\n    >\n      Withdraw\n    </button>\n  </section>\n);\n\nControls.propTypes = {\n  handleDeposit: PropTypes.func.isRequired,\n  handleWithdraw: PropTypes.func.isRequired\n};\n\nexport default Controls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./Balance.module.css\";\n\nconst Balance = ({ income, expense, balance }) => (\n  <section className={css.balance}>\n    <span>\n      <span role=\"img\" aria-label=\"arrow-up\">\n        ⬆️\n      </span>\n      {income}$\n    </span>\n    <span>\n      <span role=\"img\" aria-label=\"arrow-down\">\n        ⬇️\n      </span>\n      {expense}$\n    </span>\n    <span>Balance: {balance}$</span>\n  </section>\n);\n\nBalance.propTypes = {\n  income: PropTypes.number.isRequired,\n  expense: PropTypes.number.isRequired,\n  balance: PropTypes.number.isRequired\n};\n\nexport default Balance;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from \"./TransactionHistory.module.css\";\n\nconst TransactionLines = ({ transactions }) => {\n  return transactions.map(({ id, type, amount, date }) => (\n    <tr key={id}>\n      <td>{type}</td>\n      <td>{amount}$</td>\n      <td>{date}</td>\n    </tr>\n  ));\n};\n\nconst TransactionHistory = ({ transactions }) => (\n  <table className={css.history}>\n    <thead>\n      <tr>\n        <th>Transaction</th>\n        <th>Amount</th>\n        <th>Date</th>\n      </tr>\n    </thead>\n    <tbody>\n      {/* {transactions ? <TransactionLines transactions={transactions} /> : <tr><td colSpan=\"3\">No transactions yet</td></tr>} */}\n      <TransactionLines transactions={transactions} />\n    </tbody>\n  </table>\n);\n\nTransactionLines.defaultProps = {\n  transactions: []\n};\n\nTransactionLines.propTypes = {\n  transactions: PropTypes.array\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport v4 from 'uuid/v4';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Controls from '../Controls';\nimport Balance from '../Balance';\nimport TransactionHistory from '../TransactionHistory';\nimport css from './Dashboard.module.css';\n\nclass Dashboard extends Component {\n  state = {\n    income: 0,\n    expense: 0,\n    balance: 0,\n    transactions: [],\n  };\n\n  getIncome = storedTransactions => {\n    return storedTransactions.reduce((acc, transaction) => {\n      if (transaction.type === 'Deposit') return (acc += transaction.amount);\n      return acc;\n    }, 0);\n  };\n\n  getExpense = storedTransactions => {\n    return storedTransactions.reduce((acc, transaction) => {\n      if (transaction.type === 'Withdrawal') return (acc += transaction.amount);\n      return acc;\n    }, 0);\n  };\n\n  componentDidMount = () => {\n    toast.configure();\n    const storedValue = localStorage.getItem('transactions');\n    const valueParsed = JSON.parse(storedValue);\n    const storedArr = valueParsed || [];\n    const transIncome = this.getIncome(storedArr);\n    const transExpense = this.getExpense(storedArr);\n\n    this.setState({\n      income: transIncome,\n      expense: transExpense,\n      balance: transIncome - transExpense,\n      transactions: storedArr,\n    });\n  };\n\n  notify = message => toast(message);\n\n  handleDeposit = e => {\n    const amount = Number(e.target.parentElement.firstElementChild.value);\n    e.target.parentElement.firstElementChild.value = '';\n    if (amount) {\n      const transaction = {\n        id: v4(),\n        type: 'Deposit',\n        amount,\n        date: new Date().toLocaleString('uk'),\n      };\n\n      this.setState(prevState => ({\n        income: (prevState.income += amount),\n        balance: (prevState.balance += amount),\n        transactions: [...prevState.transactions, transaction],\n      }));\n      const { transactions } = this.state;\n      const allTransactions = [...transactions, transaction];\n      localStorage.setItem('transactions', JSON.stringify(allTransactions));\n    } else {\n      this.notify('Please enter amount');\n    }\n  };\n\n  handleWithdraw = e => {\n    const amount = Number(e.target.parentElement.firstElementChild.value);\n    e.target.parentElement.firstElementChild.value = '';\n    if (amount) {\n      const { balance } = this.state;\n      if (amount > balance) {\n        this.notify('Not enough funds on your acoount');\n        return;\n      }\n      const transaction = {\n        id: v4(),\n        type: 'Withdrawal',\n        amount,\n        date: new Date().toLocaleString('uk'),\n      };\n      this.setState(prevState => ({\n        expense: (prevState.expense += amount),\n        balance: (prevState.balance -= amount),\n        transactions: [...prevState.transactions, transaction],\n      }));\n      const { transactions } = this.state;\n      const allTransactions = [...transactions, transaction];\n      localStorage.setItem('transactions', JSON.stringify(allTransactions));\n    } else {\n      this.notify('Please enter amount');\n    }\n  };\n\n  render() {\n    const { income, expense, balance, transactions } = this.state;\n\n    return (\n      <div className={css.dashboard}>\n        <Controls\n          handleDeposit={this.handleDeposit}\n          handleWithdraw={this.handleWithdraw}\n        />\n        <Balance income={income} expense={expense} balance={balance} />\n        <TransactionHistory transactions={transactions} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2eece\",\"button\":\"Controls_button__3vsXP\"};"],"sourceRoot":""}